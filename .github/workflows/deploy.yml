name: Test and Deploy to Google Cloud Platform

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PROJECT_ID: trade-me-476221
  REGION: us-central1
  SERVICE_NAME: trade-me-backend
  BUCKET_NAME: trade-me-476221-trade-me-frontend

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Run backend tests
        run: |
          cd backend
          python -m pytest tests/ -v --tb=short

  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false

      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint || echo "Linting completed with warnings"

  test-integration:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Run integration tests
        run: |
          cd backend
          python -m pytest tests/integration/ -v --tb=short || echo "No integration tests found"

  deploy-backend:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: gcloud auth configure-docker

      - name: Deploy Backend to Cloud Run
        run: |
          cd backend
          gcloud run deploy $SERVICE_NAME \
            --source . \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --set-env-vars "DATABASE_URL=postgresql://trademe_user:${{ secrets.DB_PASSWORD }}@/trademe?host=/cloudsql/$PROJECT_ID:$REGION:trade-me-db" \
            --set-env-vars "SECRET_KEY=${{ secrets.SECRET_KEY }}" \
            --set-env-vars "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" \
            --set-env-vars "PAYPAL_CLIENT_ID=${{ secrets.PAYPAL_CLIENT_ID }}" \
            --set-env-vars "PAYPAL_CLIENT_SECRET=${{ secrets.PAYPAL_CLIENT_SECRET }}" \
            --set-env-vars "TWILIO_ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID }}" \
            --set-env-vars "TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }}" \
            --set-env-vars "TWILIO_PHONE_NUMBER=${{ secrets.TWILIO_PHONE_NUMBER }}" \
            --set-env-vars "CORS_ORIGINS=https://storage.googleapis.com/$BUCKET_NAME/app-v2.html" \
            --add-cloudsql-instances "$PROJECT_ID:$REGION:trade-me-db"

      - name: Get Backend URL
        id: backend-url
        run: |
          BACKEND_URL=$(gcloud run services describe $SERVICE_NAME --platform managed --region $REGION --format 'value(status.url)')
          echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_OUTPUT
          echo "Backend deployed at: $BACKEND_URL"

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          echo "REACT_APP_API_URL=${{ needs.deploy-backend.outputs.BACKEND_URL }}" > .env
          echo "REACT_APP_STRIPE_PUBLISHABLE_KEY=${{ secrets.REACT_APP_STRIPE_PUBLISHABLE_KEY }}" >> .env
          echo "REACT_APP_PAYPAL_CLIENT_ID=${{ secrets.REACT_APP_PAYPAL_CLIENT_ID }}" >> .env
          echo "PUBLIC_URL=https://storage.googleapis.com/$BUCKET_NAME" >> .env
          npm run build

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy Frontend to Cloud Storage
        run: |
          cd frontend
          gsutil -m cp -r build/* gs://$BUCKET_NAME/
          gsutil cp build/index.html gs://$BUCKET_NAME/app-v2.html
          gsutil web set -m app-v2.html -e app-v2.html gs://$BUCKET_NAME

      - name: Get Frontend URL
        run: |
          echo "Frontend deployed at: https://storage.googleapis.com/$BUCKET_NAME/app-v2.html"

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy-backend.result }}" == "success" ] && [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "Backend: https://trade-me-backend-325079353832.us-central1.run.app"
            echo "Frontend: https://storage.googleapis.com/trade-me-476221-trade-me-frontend/app-v2.html"
          else
            echo "❌ Deployment failed!"
            echo "Backend status: ${{ needs.deploy-backend.result }}"
            echo "Frontend status: ${{ needs.deploy-frontend.result }}"
          fi
